<?xml version="1.0" encoding="UTF-8"?>
<!-- Personalized document schema. Showing how user
     can create inheriting schema that has both new elements/structure
     and elements which are quantities. This particular
     schema inherits only from BasicQuantity schema, so more
     advanced types of quantities arent allowed.
  -->
<xsd:schema 
            targetNamespace="http://noplace.org/MyDocument"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:q="http://www.data-model.net/Quantity"
            xmlns="http://noplace.org/MyDocument"
	    elementFormDefault="qualified"
>

 	<xsd:import namespace="http://www.data-model.net/Quantity" schemaLocation="QML_03.xsd"/>

        <!-- some new directly-inheriting quantity element declarations -->
        <xsd:element name="myquantity" substitutionGroup="q:QuantityGroup" type="q:AtomicQuantityType"/>
        <xsd:element name="mytq" substitutionGroup="q:QuantityGroup" type="q:TrivialQuantityType"/>
        <xsd:element name="note" substitutionGroup="q:QuantityGroup" type="q:TrivialQuantityType"/>
        <xsd:element name="somenode" type="myElementType"/>

	<!-- now, an element which is NOT a quantity, but aggregates (a few selected types)
             of them -->
        <xsd:complexType name="myElementType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element ref="myquantity" />
			<xsd:element ref="mytq" />
                        <xsd:element ref="somenode"/>
		</xsd:choice>
        </xsd:complexType>

	<!-- my document -->
        <xsd:complexType name="myDocumentType">
                <xsd:choice maxOccurs="unbounded">
                        <xsd:element ref="q:QuantityGroup"/>
                        <xsd:element ref="somenode"/>
                        <xsd:element name="node" type="myElementType" maxOccurs="unbounded"/>
                </xsd:choice>
        </xsd:complexType>

	<!-- root element of my document -->
	<xsd:element name="mydocument" type="myDocumentType"/>

</xsd:schema>
